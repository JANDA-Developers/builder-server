import { Resolver, Mutation, Arg, Ctx } from "type-graphql";
import { GenerateResponse } from "../../../helpers/BaseResponse.type";
import {
    BusinessUser,
    BusinessUserModel,
} from "../../../models/User/UserBusiness.type";
import { mongoose } from "@typegoose/typegoose";
import { Context } from "../../../types/types";
import { errorGenForUnexist } from "../../../helpers/errorHandling";
import {
    Customer,
    CustomerModel,
} from "../../../models/User/UserCustomer.type";
import { UserError } from "../../Error/shared/Error.type";
import { getVerificationFromSession } from "../../Verification/shared/Verification.function";

const BusinessUserResetPasswordResponse = GenerateResponse(
    BusinessUser,
    "BusinessUserResetPassword"
);
type BusinessUserResetPasswordResponse = InstanceType<
    typeof BusinessUserResetPasswordResponse
>;

const CustomerResetPasswordResponse = GenerateResponse(
    Customer,
    "CustomerResetPassword"
);
type CustomerResetPasswordResponse = InstanceType<
    typeof CustomerResetPasswordResponse
>;

@Resolver()
export class UserResetPasswordResolver {
    @Mutation(() => BusinessUserResetPasswordResponse)
    async BusinessUserResetPassword(
        @Ctx() context: Context,
        @Arg("newPassword", () => String)
        newPassword: string
    ): Promise<BusinessUserResetPasswordResponse> {
        const response = new BusinessUserResetPasswordResponse();
        const session = await mongoose.startSession();

        try {
            const verification = await getVerificationFromSession(
                context.req.session
            );
            await session.withTransaction(async () => {
                if (!verification) {
                    throw new UserError("인증 정보 에러", "VERIFICATION_FAIL");
                }
                const user = await BusinessUserModel.findOne({
                    $or: [
                        {
                            email: verification.payload,
                        },
                        {
                            phoneNumber: verification.payload,
                        },
                    ],
                });
                if (!user) {
                    throw errorGenForUnexist("User");
                }

                await user.verify([verification], session);
                // password Reset
                {
                    user._password = newPassword;
                    await user.hashPassword();
                }
                response.setData(user);
            });
        } catch (error) {
            response.setError(error);
        } finally {
            session.endSession();
        }
        return response;
    }

    @Mutation(() => CustomerResetPasswordResponse)
    async CustomerResetPassword(
        @Ctx() context: Context,
        @Arg("newPassword", () => String)
        newPassword: string
    ): Promise<CustomerResetPasswordResponse> {
        const response = new CustomerResetPasswordResponse();
        const session = await mongoose.startSession();

        try {
            const verification = await getVerificationFromSession(
                context.req.session
            );
            await session.withTransaction(async () => {
                if (!verification) {
                    throw new UserError("인증 정보 에러", "VERIFICATION_FAIL");
                }
                const user = await CustomerModel.findOne({
                    $and: [
                        {
                            $or: [
                                {
                                    email: verification.payload,
                                },
                                {
                                    phoneNumber: verification.payload,
                                },
                            ],
                        },
                        {
                            _storeId: context.selectedStoreId,
                        },
                    ],
                });
                if (!user) {
                    throw errorGenForUnexist("User");
                }

                await user.verify([verification], session);
                // password Reset
                {
                    user._password = newPassword;
                    await user.hashPassword();
                }
                response.setData(user);
            });
        } catch (error) {
            response.setError(error);
        } finally {
            session.endSession();
        }
        return response;
    }
}
